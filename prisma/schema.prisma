// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  BRANCH_ADMIN
  USER
  EMP
  CUSTOMER
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(190)
  email     String   @unique @db.VarChar(191)
  password  String
  mobile    String   @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch_id String?

  @@map("users")
}

model Branch {
  id            Int      @id @default(autoincrement())
  branch_name   String
  branch_code   String
  address1      String
  address2      String
  city          String
  pincode       String?
  state         String
  country       String?  @default("India")
  branch_email  String   @unique
  admin_id      Int?
  branch_mobile String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("branch")
}

model Goldrate {
  id             Int              @id @default(autoincrement())
  gold_rate      String
  prev_gold_rate updategoldrate[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("goldrate")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  mobile    String   @unique
  address   String
  city      String
  pincode   String?
  state     String
  country   String?  @default("India")
  //permanent_address String
  aadhaar   String
  date      String
  password  String
  branch_id String?
  plan_id   String?
  amount    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emi_id    Int?     @default(0)
  //emi       emi      @relation(fields: [emiId], references: [id])
  //emiId     Int      @unique
  // emi    Emi?

  @@map("customer")
}

model plan {
  id        Int      @id @default(autoincrement())
  plan_name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plan")
}

model Emi {
  id             Int      @id @default(autoincrement())
  emi_month      String
  emi_year       String
  payment_status Boolean  @default(false)
  dateOfPayment  String
  // customer       Customer      @relation(fields: [customerId], references: [id])
  // customerId     Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("emi")
}

model updategoldrate {
  id         Int       @id @default(autoincrement())
  goldrate   String
  Goldrate   Goldrate? @relation(fields: [goldrateId], references: [id])
  goldrateId Int?
}
